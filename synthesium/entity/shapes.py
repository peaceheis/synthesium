"""Some predefined VectorEntities"""
from math import pi

from synthesium.entity.entity import configure
from synthesium.entity.point import Point
from synthesium.entity.vectorentity import VectorEntity
from synthesium.utils.colors import WHITE, PURE_BLUE, HALF_OPAQUE_RED, BLACK


class Arc(VectorEntity):
    def __init__(
        self,
        center: Point,
        radius: int,
        angle1: int,
        angle2: int,
        negative=False,
        *points: Point,
        **kwargs
    ):
        super().__init__(*points, **kwargs)
        default_config = {
            "color": PURE_BLUE,
            "fill_color": HALF_OPAQUE_RED,
            "line_width": 10,
        }
        self.center = center
        self.radius = radius
        self.angle1 = angle1
        self.angle2 = angle2
        self.points = (center,)
        # for compatability purposes with the rest of the library, which assumes all entities have a tuple attribute called self.points.
        self.negative = negative
        self.config = configure(default_config, **kwargs)
        self.degrees = abs(angle1 - angle2)

    def arc_length(self) -> float:
        return self.radius * 2 * (self.degrees / 360) * pi  # the arc length formula

    def get_center(self) -> Point:
        return self.center

    def set_center(self, center: Point):
        self.center = center
        self.points = (center,)
        return self

    def get_radius(self):
        return self.radius

    def set_radius(self, radius: Point):
        self.radius = radius

    def get_degrees(self):
        return abs(self.angle1 - self.angle2)

    def get_angle1(self):
        return self.angle1

    def set_angle1(self, angle: int):
        self.angle1 = angle
        return self

    def get_angle2(self):
        return self.angle2

    def set_angle2(self, angle: int):
        self.angle2 = angle
        return self

    def get_points(self):
        return [self.radius]


class Circle(Arc):
    """Circles are really just 360 degree Arcs."""

    def __init__(self, center: Point, radius: int, **kwargs):
        super().__init__(center, radius, 0, 360, **kwargs)


# class Quadrilateral(Polygon):
#     """Class for any Quadrilaterals, inheriting from Polygon. """
#
#     def __init__(self, point1, point2, point3, point4, **kwargs):
#         """Instead of making the user create each individual Entity, all the user has to do is give the points and Synthesium generates the rest."""
#         super().__init__(point1, point2, point3, point4, **kwargs)
#
#
# class Square(Polygon):
#     """A class that enforces all the side lengths to be the same."""
#
#     def __init__(self, center, side_length, **kwargs):
#         """[to make sure that a square is generated, the center and side length are given, and the points are generated by
#             going out half the side length in the +x +y, +x, -y, -x, -y, and -x, +y directions.]
#
#         Args:
#             center ([tuple]): [the x and y coordinates of the center.]
#             side_length ([Union[float, int]]): [the length of the sides (obviously)]
#         """
#         half_side_length = side_length / 2
#         points = [
#             center[0] + half_side_length, center[1] + half_side_length,  # positive x and y
#             center[0] - half_side_length, center[0] + half_side_length,  # negative x, positive y
#             center[0] - half_side_length, center[0] - half_side_length,  # negative x and y
#             center[0] + half_side_length, center[0] - half_side_length,  # positive x and negative y
#         ]
#
#         super().__init__(*points, **kwargs)
#
#
# class Triangle(Polygon):
#     """I would think the name is self-explanatory."""
#
#     def __init__(self, point1, point2, point3, **kwargs):
#         super().__init__(point1, point2, point3, **kwargs)
#         self.config = {
#             "fill_color": PURE_RED
#         }


class Line(VectorEntity):
    def __init__(self, point1: Point, point2: Point, **kwargs):
        super().__init__(point1, point2, **kwargs)

    def get_point1(self) -> Point:
        return self.points[0]

    def set_point1(self, point: Point):
        self.points[0] = point

    def get_point2(self):
        return self.points[1]

    def set_point2(self, point: Point):
        self.point2 = point
        return self


class Curve(VectorEntity):
    def __init__(
        self, anchor1: Point, handle1: Point, handle2: Point, anchor2: Point, **kwargs
    ):
        self.config = {"fill_color": WHITE, "color": BLACK, "line_width": 4}
        configure(self.config, **kwargs)
        self.points = (
            anchor1,
            handle1,
            handle2,
            anchor2,
        )  # look into BÃ©zier curves, namely cubic ones, for info on how this works.
